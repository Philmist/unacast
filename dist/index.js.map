{"version":3,"file":"index.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/main/ReadIcons.ts","webpack:///./src/main/getRes.ts","webpack:///./src/main/main.ts","webpack:///./src/main/readBBS/Read5ch.ts","webpack:///./src/main/readBBS/readSitaraba.ts","webpack:///./src/main/startServer.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main/main.ts\");\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * アイコン表示に関するモジュール\r\n * シングルトン\r\n */\r\nvar fs_1 = __importDefault(require(\"fs\"));\r\nvar path_1 = __importDefault(require(\"path\"));\r\nvar log = require('electron-log');\r\nvar randomIconList;\r\nvar idIconList;\r\n/**\r\n * コンストラクタ\r\n * ・ランダムフォルダからアイコン名を取得してリスト化\r\n * ・IDフォルダからもリスト化、空の対応マップ作製\r\n * ・コテハン対応ファイルを読みこんでmapに格納\r\n */\r\nvar ReadIcons = /** @class */ (function () {\r\n    function ReadIcons() {\r\n        /**\r\n         * アイコンランダム表示機能（デフォルト）\r\n         * 起動時に作成したアイコンリストからランダムで1つ取得\r\n         */\r\n        this.getRandomIcons = function () {\r\n            var iconPath = '';\r\n            try {\r\n                var dirName = './img/random/';\r\n                // リストからランダム取得\r\n                //  var size = randomIconList.size;\r\n                var num = Math.floor(randomIconList.length * Math.random());\r\n                log.info(JSON.stringify(randomIconList));\r\n                iconPath = dirName + randomIconList[num];\r\n            }\r\n            catch (e) {\r\n                log.error(e);\r\n            }\r\n            return iconPath;\r\n        };\r\n        //画像ディレクトリ\r\n        var randomDir = path_1.default.resolve(__dirname, \"../public/img/random/\");\r\n        console.log('[ReadIcons]loadRandomDir = ' + randomDir);\r\n        log.info('[ReadIcons]loadRandomDir = ' + randomDir);\r\n        //  ランダムアイコン取得\r\n        randomIconList = readDir(randomDir);\r\n        //ID用アイコンディレクトリ\r\n        var idDir = path_1.default.resolve(__dirname, \"../public/img/id/\");\r\n        console.log('[ReadIcons]loadIDDir = ' + idDir);\r\n        //  ランダムアイコン取得\r\n        idIconList = readDir(idDir);\r\n    }\r\n    return ReadIcons;\r\n}());\r\nvar readDir = function (imgDir) {\r\n    var iconFileList = [];\r\n    console.log('[ReadIcons.readDir]start');\r\n    //  指定したディレクトリのアイコン取得\r\n    var files = fs_1.default.readdirSync(imgDir, { withFileTypes: true });\r\n    //pngファイルのみ返却リストに格納する\r\n    files.forEach(function (file) {\r\n        console.log('[ReadIcons.readDir]file = ' + file);\r\n        log.info('[ReadIcons.readDir]file = ' + file);\r\n        // asar圧縮するとfileが文字列になる。開発環境だとfileオブジェクトになる\r\n        var target = typeof file.name !== 'string' ? file : file.name;\r\n        var regx = /.*\\.png$/.test(target);\r\n        if (regx) {\r\n            iconFileList.push(target);\r\n        }\r\n    });\r\n    console.log('[ReadIcons.readDir]end');\r\n    log.info('[ReadIcons.readDir]end');\r\n    log.info(JSON.stringify(iconFileList));\r\n    return iconFileList;\r\n};\r\n/**\r\n * IDによるアイコン固定機能（オプションでON,OFF可能）\r\n * 初出のIDならばランダムでアイコンを取得し\r\n * IDとファイル名のセットでマップに格納\r\n * @param string // ID\r\n * @return string filename\r\n */\r\n/**\r\n * コテハンリスト機能（オプションでON,OFF可能）\r\n * koteフォルダの下にkotehan.jsonを作って\r\n * 名前とアイコンファイル名の対応をマップにして返すだけ\r\n */\r\nexports.default = ReadIcons;\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar express_1 = __importDefault(require(\"express\"));\r\nvar router = express_1.default.Router();\r\nvar log = require('electron-log');\r\nvar body_parser_1 = __importDefault(require(\"body-parser\")); // jsonパーサ\r\nvar ReadIcons_1 = __importDefault(require(\"./ReadIcons\")); //アイコンファイル名取得\r\nvar readIcons = new ReadIcons_1.default();\r\nvar JSDOM = require('jsdom').JSDOM;\r\nvar $ = require('jquery')(new JSDOM().window);\r\nvar readSitaraba_1 = __importDefault(require(\"./readBBS/readSitaraba\")); // したらば読み込み用モジュール\r\nvar sitaraba = new readSitaraba_1.default();\r\nvar Read5ch_1 = __importDefault(require(\"./readBBS/Read5ch\")); // 5ch互換板読み込み用モジュール\r\nvar read5ch = new Read5ch_1.default();\r\n// 掲示板読み込みモジュール、一度決定したら使いまわすためにグローバル宣言\r\nvar bbsModule = null;\r\n// リクエストのbodyをパース下りエンコードしたりするためのやつ\r\nrouter.use(body_parser_1.default.urlencoded({ extended: true }));\r\nrouter.use(body_parser_1.default.json());\r\n/*\r\n * http://localhost:3000/getRes にGETメソッドのリクエストを投げると、\r\n * JSON形式で文字列を返す。\r\n */\r\nrouter.post('/', function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var threadUrl, resNum;\r\n    return __generator(this, function (_a) {\r\n        log.info('getRes');\r\n        threadUrl = req.body.threadUrl;\r\n        resNum = req.body.resNumber;\r\n        //リクエストURLを解析し、使用するモジュールを変更する（初回のみ）\r\n        if (bbsModule === null) {\r\n            bbsModule = analysBBSName(threadUrl);\r\n        }\r\n        //選択したモジュールでレス取得処理を行う\r\n        bbsModule\r\n            .read(threadUrl, resNum)\r\n            .then(function (response) {\r\n            console.log('[getRes.js]レス取得成功。件数=' + response.length);\r\n            log.info('[getRes.js]レス取得成功。件数=' + response.length);\r\n            // 返却されたjsonオブジェクトを組み立てる\r\n            var result = buildResponseArray(response);\r\n            // 返却\r\n            res.header('Content-Type', 'application/json; charset=UTF-8');\r\n            console.log('[getRes.js]レス処理完了');\r\n            log.info('[getRes.js]レス処理完了');\r\n            //    console.log(result);\r\n            res.send(result);\r\n        })\r\n            .catch(function (err) {\r\n            console.log(err);\r\n            log.error(err);\r\n        });\r\n        return [2 /*return*/];\r\n    });\r\n}); });\r\n/*\r\n * URLをみてどこのBBSか判定して使用するモジュールを返却する\r\n */\r\nvar analysBBSName = function (threadUrl) {\r\n    //したらばドメイン名\r\n    var sitarabaDomain = 'jbbs.shitaraba.net';\r\n    //こんな感じで必要に応じて増やしていけばいいんじゃね？\r\n    //  const dokkanoBBS = 'dokka.bbs.com';\r\n    if (threadUrl.indexOf(sitarabaDomain) != -1) {\r\n        // URLにしたらばドメイン名が入ってればしたらば\r\n        return sitaraba;\r\n    }\r\n    // どこにも該当しなかったらとりあえず5chで\r\n    // この辺も対応ドメインリストとか作ってちゃんと判定したほうがよさそう\r\n    return read5ch;\r\n};\r\n/**\r\n * レスポンスの生成\r\n * レスポンスオブジェクトの配列をHTMLに変換\r\n */\r\nvar buildResponseArray = function (resObject) {\r\n    //結果を格納する配列\r\n    var result = new Array();\r\n    console.log('[getRes.buildResponseArray]レスポンス整形開始 件数=' + resObject.length);\r\n    resObject.forEach(function (value) {\r\n        result.push(buildResponse(value));\r\n    });\r\n    return result;\r\n};\r\n/**\r\n *レスポンスのパース\r\n *レス番号とHTML文字列を格納したオブジェクトを返却する\r\n * @param object // レスオブジェクト（ReadShitaraba.jsとか参照）\r\n * @return { レス番 , HTML整形後のレス }のオブジェクト\r\n */\r\nfunction buildResponse(res) {\r\n    //  console.log('[getRes.js]パース開始');\r\n    //  console.log(res);\r\n    //最終的にHTML文字列にするためのダミーオブジェクト\r\n    var $dummy = $('<div />');\r\n    var $li = $('<li />', { class: 'list-item' });\r\n    var $iconImg = getIcon(res.name, res.id); //アイコン取得\r\n    var $icon = $('<span />', { class: 'icon-block' }).append($iconImg); // ここにアイコン\r\n    //レス番を取得\r\n    var $resNumber = $('<span />', { class: 'resNumber' }).append(res.number);\r\n    //名前を取得\r\n    var $name = $('<span />', { class: 'name' }).append(res.name);\r\n    //日付を取得\r\n    var $date = $('<span />', { class: 'date' }).append(res.date);\r\n    //レスを取得\r\n    var $res = $('<span />', { class: 'res' }).append(res.text);\r\n    // 名前やレスのエリア\r\n    var $resDiv = $('<div />', { class: 'content' });\r\n    //レス番表示\r\n    if (globalThis.config.showNumber) {\r\n        $resDiv.append($resNumber);\r\n    }\r\n    //名前表示\r\n    if (globalThis.config.showName) {\r\n        $resDiv.append($name);\r\n    }\r\n    //時刻表示\r\n    if (globalThis.config.showTime) {\r\n        $resDiv.append($date);\r\n    }\r\n    //ここで改行化スペースを入れる\r\n    if (globalThis.config.newLine) {\r\n        $resDiv.append('<br/>').append($res);\r\n    }\r\n    else {\r\n        $resDiv.append($res);\r\n    }\r\n    $li.append($icon);\r\n    $li.append($resDiv);\r\n    //HTMLオブジェクトをダミー要素へ入れる\r\n    $dummy.append($li);\r\n    //レス番号更新\r\n    //$('#resNumber').val(parseInt(res.number) + 1);\r\n    //  console.log('[getRes.js]パース完了');\r\n    //  console.log($dummy.html());\r\n    // レス番とテキストをセットにしたJSONを返す\r\n    var result = {\r\n        resNumber: res.number,\r\n        html: $dummy.html(),\r\n    };\r\n    // JSONオブジェクトを返却\r\n    return result;\r\n}\r\n/**\r\n * アイコン画像取得表示のためのimgタグを返す\r\n * @param String // name 名前\r\n * @param String // id ID、板によっては非表示だったりする、困る\r\n */\r\nfunction getIcon(name, id) {\r\n    var src = getIconFileName(name, id);\r\n    var $imgTag = $('<img />', { class: 'icon', src: src });\r\n    return $imgTag;\r\n}\r\n/**\r\n * アイコン画像名取得、名前やIDを見て条件によって固定のアイコンを返す\r\n * @param String // name 名前\r\n * @param String // id ID、板によっては非表示だったりする、困る\r\n */\r\nfunction getIconFileName(name, id) {\r\n    // アイコンファイル名\r\n    var src;\r\n    /* まだまだ未実装\r\n    // コテハン機能\r\n    if(コテハンオプション == true){\r\n      src = ReadIcons.getKotehanIcons();\r\n      if(src != null){\r\n        // 名前に対応するアイコンが取得出来たらreturnする\r\n        return src;\r\n      }\r\n    }\r\n    // IDとアイコン関連付け機能\r\n    if(IDオプション == true\r\n      && id != null){\r\n      src = ReadIcons.getIdIcons();\r\n      if(src != null){\r\n        return src;\r\n      }\r\n    }\r\n    */\r\n    // ランダムアイコン取得\r\n    return readIcons.getRandomIcons();\r\n}\r\nexports.default = router;\r\n","'use strict';\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//Electronのモジュール\r\nvar path_1 = __importDefault(require(\"path\"));\r\nvar electron_1 = __importDefault(require(\"electron\"));\r\nvar log = require('electron-log');\r\nprocess.on('uncaughtException', function (err) {\r\n    log.error('electron:event:uncaughtException');\r\n    log.error(err);\r\n    log.error(err.stack);\r\n    // app.quit();\r\n});\r\n//アプリケーションをコントロールするモジュール\r\nvar app = electron_1.default.app;\r\n// サーバー起動モジュール\r\nvar ss = require('./startServer');\r\nconsole.log(ss);\r\n//ウィンドウを作成するモジュール\r\nvar BrowserWindow = electron_1.default.BrowserWindow;\r\n// メインウィンドウはGCされないようにグローバル宣言\r\nvar mainWindow = null;\r\n//全てのウィンドウが閉じたら終了\r\napp.on('window-all-closed', function () {\r\n    if (process.platform != 'darwin') {\r\n        app.quit();\r\n    }\r\n});\r\n// Electronの初期化完了後に実行\r\napp.on('ready', function () {\r\n    //ウィンドウサイズを1280*720（フレームサイズを含まない）に設定する\r\n    mainWindow = new BrowserWindow({\r\n        width: 700,\r\n        height: 720,\r\n        useContentSize: true,\r\n        icon: __dirname + './../../icon.png',\r\n        webPreferences: {\r\n            nodeIntegration: true,\r\n        },\r\n    });\r\n    mainWindow.setTitle('unacast');\r\n    //使用するhtmlファイルを指定する\r\n    mainWindow.loadURL(path_1.default.resolve(__dirname, '../src/html/index.html'));\r\n    // ウィンドウが閉じられたらアプリも終了\r\n    mainWindow.on('closed', function () {\r\n        mainWindow = null;\r\n    });\r\n    // mainWindow.webContents.openDevTools();\r\n});\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * 5ch互換BBS読み込み用モジュール\r\n */\r\nvar rp = __importStar(require(\"request-promise\")); //httpリクエスト\r\nvar iconv_lite_1 = __importDefault(require(\"iconv-lite\")); // 文字コード変換用パッケージ\r\nvar log = require('electron-log');\r\n//ステータスコード304 _NotModified\r\nvar NOT_MODIFIED = '304';\r\nvar RANGE_NOT_SATISFIABLE = '416';\r\n// 最終取得スレッド\r\nvar lastThreadUrl = '';\r\n// 最終レス番号\r\nvar lastResNumber = 0;\r\n//最終更新日時\r\nvar lastModified = null;\r\n// 最終バイト数\r\nvar lastByte = 0;\r\n/**\r\n * コンストラクタ\r\n *\r\n */\r\nvar Read5ch = /** @class */ (function () {\r\n    function Read5ch() {\r\n        var _this = this;\r\n        /**\r\n         * レス読み込み\r\n         * 引数で指定した板からレスを読む\r\n         * レス番号を指定していない場合は最新1件取得\r\n         * @param String // threadUrl スレURL\r\n         * @param String // resNum レス番号\r\n         */\r\n        this.read = function (threadUrl, resNum) { return __awaiter(_this, void 0, void 0, function () {\r\n            var rep, requestUrl, range, options, responseJson, response, statusCode, headers, str, error_1, rsArray;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        log.info(\"threadUrl=\" + threadUrl + \" resNum=\" + resNum);\r\n                        //板や最終日レス番号がかわったら最初からとり直す(lastmodifiと rangeのリセット)\r\n                        if (threadUrl != lastThreadUrl || parseInt(resNum) < lastResNumber || resNum === '') {\r\n                            lastThreadUrl = threadUrl;\r\n                            lastModified = null;\r\n                            lastByte = 0;\r\n                            console.log('[Read5ch.js]resete!!!!!!!!!!!!!!!!');\r\n                        }\r\n                        else {\r\n                            console.log('noresete');\r\n                        }\r\n                        rep = /\\/test\\/read.cgi(\\/.+)(\\/.+)\\//;\r\n                        requestUrl = threadUrl.replace(rep, '$1/dat$2.dat');\r\n                        range = lastByte;\r\n                        options = {\r\n                            url: requestUrl,\r\n                            method: 'GET',\r\n                            encoding: null,\r\n                            resolveWithFullResponse: true,\r\n                            headers: {\r\n                                'if-modified-since': lastModified,\r\n                                range: 'bytes=' + range + '-',\r\n                            },\r\n                        };\r\n                        console.log(options);\r\n                        //掲示板へのリクエスト実行\r\n                        console.log('[Read5ch.js]5ch系BBSレス取得API呼び出し開始');\r\n                        log.info('[Read5ch.js]5ch系BBSレス取得API呼び出し開始');\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, rp.get(options)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        statusCode = response.statusCode;\r\n                        console.log('[Read5ch.js]5ch系BBSレス取得API呼び出し完了、statusCode=' + statusCode);\r\n                        log.info('[Read5ch.js]5ch系BBSレス取得API呼び出し完了、statusCode=' + statusCode);\r\n                        // レスポンスヘッダ表示\r\n                        console.log('[Read5ch.read]レスポンスヘッダ=');\r\n                        headers = response.headers;\r\n                        console.log(headers);\r\n                        //LastModifiedとRange更新処理\r\n                        if (headers['last-modified'] != null) {\r\n                            lastModified = headers['last-modified'];\r\n                            console.log('[Read5ch.read]lastModified=' + lastModified);\r\n                        }\r\n                        str = iconv_lite_1.default.decode(Buffer.from(response.body), 'Shift_JIS');\r\n                        // レスポンスオブジェクト作成、content-rangeがある場合とない場合で処理を分ける\r\n                        if (headers['content-range'] == null || lastByte == 0) {\r\n                            console.log('[Read5ch.read]content-range=' + headers['content-range']);\r\n                            responseJson = purseNewResponse(str, resNum);\r\n                        }\r\n                        else {\r\n                            responseJson = purseDiffResponse(str, resNum);\r\n                        }\r\n                        // 取得バイト数表示\r\n                        if (headers['content-length'] != null && responseJson.length > 0) {\r\n                            lastByte = lastByte + parseInt(headers['content-length']) - 1;\r\n                            console.log('[Read5ch.read]lastByte=' + lastByte);\r\n                        }\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        error_1 = _a.sent();\r\n                        rsArray = new Array();\r\n                        responseJson = rsArray;\r\n                        if (error_1.status == NOT_MODIFIED) {\r\n                            log.error('[Read5ch.js]5ch系BBSレス取得APIリクエストエラー、NOT_MODIFIED');\r\n                        }\r\n                        else if (error_1.status == RANGE_NOT_SATISFIABLE) {\r\n                            log.error('[Read5ch.js]5ch系BBSレス取得APIリクエストエラー、RANGE_NOT_SATISFIABLE');\r\n                        }\r\n                        else {\r\n                            log.error('[Read5ch.js]5ch系BBSレス取得APIリクエストエラー、message=' + error_1.message);\r\n                        }\r\n                        return [3 /*break*/, 4];\r\n                    case 4:\r\n                        log.info(JSON.stringify(responseJson));\r\n                        return [2 /*return*/, responseJson];\r\n                }\r\n            });\r\n        }); };\r\n    }\r\n    return Read5ch;\r\n}());\r\n/**\r\n *取得したレスポンス（複数）のパース\r\n *戻りとしてパースしたjsonオブジェクトの配列を返す\r\n * @param string // res 板から返却されたdat\r\n * @param string // resNum リクエストされたレス番号\r\n */\r\nvar purseNewResponse = function (res, resNum) {\r\n    //結果を格納する配列\r\n    var result = new Array();\r\n    // レス番号\r\n    var num = 0;\r\n    //新着レスを改行ごとにSplitする\r\n    var resArray = res.split(/\\r\\n|\\r|\\n/);\r\n    // 新着なしなら戻る。\r\n    if (resArray.length == 0) {\r\n        return result;\r\n    }\r\n    // 配列の最後に空の要素が入ることがあるので取り除く\r\n    if (resArray[resArray.length - 1].length == 0) {\r\n        resArray.pop();\r\n    }\r\n    // レス指定なしの場合最後の1件取得\r\n    if (resNum == null || resNum === '') {\r\n        num = resArray.length - 1;\r\n    }\r\n    else {\r\n        num = parseInt(resNum) - 1;\r\n    }\r\n    console.log('[Read5ch.purseNewResponse]取得レス番号=' + num);\r\n    //1行ごとにパースする\r\n    for (; num < resArray.length; num++) {\r\n        //パースメソッド呼び出し\r\n        if (resArray[num].length > 0) {\r\n            result.push(purseResponse(resArray[num], num + 1));\r\n        }\r\n    }\r\n    lastResNumber = num + 1;\r\n    // パースしたオブジェクトの配列を返却\r\n    return result;\r\n};\r\n/**\r\n *取得したレスポンス（複数）のパース\r\n *戻りとしてパースしたjsonオブジェクトの配列を返す\r\n * @param string // res 板から返却されたdat1行分\r\n * @param string // resNum リクエストされたレス番号\r\n */\r\nvar purseDiffResponse = function (res, resNum) {\r\n    //結果を格納する配列\r\n    var result = new Array();\r\n    // レス番号\r\n    var num = parseInt(resNum);\r\n    //新着レスを改行ごとにSplitする\r\n    var resArray = res.split(/\\r\\n|\\r|\\n/);\r\n    // 新着なしなら戻る。\r\n    if (resArray.length == 0) {\r\n        return result;\r\n    }\r\n    else {\r\n        // 配列の最後に空の要素が入ることがあるので取り除く\r\n        if (resArray[resArray.length - 1].length == 0) {\r\n            resArray.pop();\r\n        }\r\n    }\r\n    console.log('[Read5ch.purseDiffResponse]取得レス番号=' + num);\r\n    //1行ごとにパースする\r\n    resArray.forEach(function (value) {\r\n        //パースメソッド呼び出し\r\n        if (value.length > 0) {\r\n            result.push(purseResponse(value, num));\r\n            num++;\r\n        }\r\n    });\r\n    // パースしたオブジェクトの配列を返却\r\n    return result;\r\n};\r\n/**\r\n * レスポンスのパース\r\n *Jsonオブジェクトを返却する\r\n *@param String // res レスポンス1レス\r\n *@param Integer // num レス番（0スタート）\r\n *{\r\n * number: レス番号\r\n * name: 名前\r\n * email: メアド\r\n * date: 日付\r\n * text: 本文\r\n * threadTitle: スレタイ\r\n * id: ID\r\n *}\r\n */\r\nvar purseResponse = function (res, num) {\r\n    //APIの返却値を<>で分割\r\n    //レスの要素\r\n    //0:名前\r\n    //1:メアド\r\n    //2:日付とID （2019/11/03(日) 08:55:00 ID:kanikani）みたいに表示\r\n    //3:本文\r\n    //4:スレタイ （1レス目のみ）\r\n    var splitRes = res.split('<>');\r\n    // 日付とID分離処理、' ID:'で区切る\r\n    var dateId = splitRes[2].split(' ID:');\r\n    var date = dateId[0];\r\n    // IDが取得できない場合はnullにする\r\n    var id = dateId.length == 2 ? dateId[1] : null;\r\n    var resJson = {\r\n        number: num,\r\n        name: splitRes[0],\r\n        email: splitRes[1],\r\n        date: date,\r\n        text: splitRes[3],\r\n        threadTitle: splitRes[4],\r\n        id: id,\r\n    };\r\n    // オブジェクトを返却\r\n    return resJson;\r\n};\r\nexports.default = Read5ch;\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * したらば読み込み用モジュール\r\n */\r\nvar request = require('request-promise'); //httpリクエスト\r\nvar iconv = require('iconv-lite'); // 文字コード変換用パッケージ\r\nvar log = require('electron-log');\r\n/**\r\n * コンストラクタ\r\n *\r\n */\r\nvar ReadSitaraba = /** @class */ (function () {\r\n    function ReadSitaraba() {\r\n        //テストメソッド\r\n        this.test = function () {\r\n            console.log(global.config);\r\n        };\r\n        /**\r\n         * レス読み込み\r\n         * 引数で指定した板からレスを読む\r\n         * レス番号を指定していない場合は最新1件取得\r\n         * @param String // threadUrl スレURL\r\n         * @param String // resNum レス番号\r\n         */\r\n        this.read = function (threadUrl, resNum) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var requestUrl, options, responseJson;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            requestUrl = threadUrl.replace('read.cgi', 'rawmode.cgi');\r\n                            if (resNum > 0) {\r\n                                // レス番号がある場合レス番号以降を取得\r\n                                requestUrl += resNum + '-';\r\n                            }\r\n                            else {\r\n                                // レス番号がない場合最新の1件取得\r\n                                requestUrl += 'l1';\r\n                            }\r\n                            options = {\r\n                                url: requestUrl,\r\n                                method: 'GET',\r\n                                encoding: null,\r\n                            };\r\n                            //掲示板へのリクエスト実行\r\n                            log.info('[ReadSitaraba.js]したらばレス取得API呼び出し開始');\r\n                            console.log('[ReadSitaraba.js]したらばレス取得API呼び出し開始');\r\n                            return [4 /*yield*/, request(options).then(function (body) {\r\n                                    console.log('[ReadSitaraba.js]したらばレス取得API呼び出し成功');\r\n                                    //したらばAPIの文字コードはEUC-JPなのでUTF-8に変換する\r\n                                    var str = iconv.decode(Buffer.from(body), 'EUC-JP');\r\n                                    // レスポンスオブジェクト作成\r\n                                    responseJson = purseNewResponse(str);\r\n                                })];\r\n                        case 1:\r\n                            _a.sent();\r\n                            return [2 /*return*/, responseJson];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n    }\r\n    return ReadSitaraba;\r\n}());\r\n//取得したレスポンス（複数）のパース\r\n//戻りとしてパースしたjsonオブジェクトの配列を返す\r\nfunction purseNewResponse(res) {\r\n    //結果を格納する配列\r\n    var result = new Array();\r\n    //新着レスを改行ごとにSplitする\r\n    var resArray = res.split(/\\r\\n|\\r|\\n/);\r\n    //1行ごとにパースする\r\n    resArray.forEach(function (value) {\r\n        //パースメソッド呼び出し\r\n        if (value.length > 0) {\r\n            result.push(purseResponse(value));\r\n        }\r\n    });\r\n    // パースした<li>オブジェクトの配列を返却\r\n    return result;\r\n}\r\n/**レスポンスのパース\r\n *Jsonオブジェクトを返却する\r\n *@param String // res レスポンス1レス\r\n *{\r\n * number: レス番号\r\n * name: 名前\r\n * email: メアド\r\n * date: 日付\r\n * text: 本文\r\n * threadTitle: スレタイ\r\n * id: ID\r\n *}\r\n */\r\nfunction purseResponse(res) {\r\n    //APIの返却値を<>で分割\r\n    //レスの要素\r\n    //0:レス番号\r\n    //1:名前\r\n    //2:メアド\r\n    //3:日付\r\n    //4:本文\r\n    //5:スレタイ\r\n    //6:ID\r\n    var splitRes = res.split('<>');\r\n    var resJson = {\r\n        number: splitRes[0],\r\n        name: splitRes[1],\r\n        email: splitRes[2],\r\n        date: splitRes[3],\r\n        text: splitRes[4],\r\n        threadTitle: splitRes[5],\r\n        id: splitRes[6],\r\n    };\r\n    // オブジェクトを返却\r\n    return resJson;\r\n}\r\nexports.default = ReadSitaraba;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar path_1 = __importDefault(require(\"path\"));\r\nvar express_1 = __importDefault(require(\"express\"));\r\nvar app;\r\nvar electron_1 = require(\"electron\");\r\n// レス取得APIをセット\r\nvar getRes_1 = __importDefault(require(\"./getRes\"));\r\n// サーバーをグローバル変数にセットできるようにする（サーバー停止処理のため）\r\nvar server;\r\n/* サーバー起動\r\n * config:設定を格納したjson、以下jsonの中身\r\n * url:掲示板URL\r\n * resNumber:読み込み開始レス位置\r\n * port:ポート番号\r\n *\r\n *\r\n */\r\nelectron_1.ipcMain.on('start-server', function (event, config) {\r\n    // express = require('express');\r\n    app = express_1.default();\r\n    var ejs = require('ejs');\r\n    app.set('view engine', 'ejs');\r\n    //viewディレクトリの指定\r\n    app.set('views', path_1.default.resolve(__dirname, '../views'));\r\n    app.use('/getRes', getRes_1.default);\r\n    // 設定情報をグローバル変数へセットする\r\n    globalThis.config = config;\r\n    console.log('[startServer]設定値 = ');\r\n    console.log(globalThis.config);\r\n    app.get('/', function (req, res, next) {\r\n        res.render('server', config);\r\n        console.log(config);\r\n        req.connection.end();\r\n    });\r\n    //静的コンテンツはpublicディレクトリの中身を使用するという宣言\r\n    app.use(express_1.default.static(path_1.default.resolve(__dirname, '../public')));\r\n    //指定したポートで待ち受け開始\r\n    server = app.listen(config.port, function () {\r\n        console.log('[startServer]start server on port:' + config.port);\r\n        console.log(server.listening);\r\n    });\r\n    //成功メッセージ返却\r\n    event.returnValue = 'success';\r\n});\r\n/**\r\n * サーバー停止\r\n */\r\nelectron_1.ipcMain.on('stop-server', function (event) {\r\n    console.log(server.listening);\r\n    server.close();\r\n    app = null;\r\n    // express = null;\r\n    console.log('[startServer]server stop');\r\n    console.log(server.listening);\r\n    event.returnValue = 'stop';\r\n});\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxlsourceRoot":""}